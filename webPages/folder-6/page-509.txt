Identity and Access Management Home Index Search Log In History Latest Changes services/GRS GT Role System (GRS) What is GRS The GRS or GT Role System (GRS) is a distributed admin tool to assign roles to people. This is often for purposes of access authorization. It allows service owners to maintain customer roles, for more flexible authorization to their service. Roles are simply labels that are useful to somebody, usually for inclusion in a collaborative group or authorization to use a computer resource. More information can be found here. And here is a presentation from training on GRS and Buzzapi. Click Here to download a ppt of GRS and Buzzapi training GRS has a client that allows users, in a self service manner, to maintain roles of accounts or people, and to have these reflected as attributes of people and accounts in GTED. These can then be used for authorization for services or applications. Currently GRS is a custom java application (June 2017). It is probably worth noting that there is an Internet2 product called Grouper, that is not production yet, but is likely to be the role system is the future of this GRS service. http://www.internet2.edu/products-services/trust-identity/grouper/ Who uses GRS? Hundreds of GT applications use this tool to manage access to services, where those services can read LDAP (GTED) for entitlement information. The Identity (IAM) team manages GRS, and service owners manage their content, for authorizating their services. Architecture GRS roles are written into GTED LDAP entitlements. There is one entitlement for each role. At login time, an application can do authentication and then use these LDAP attributes to decide if a user is authorized to use the service. GRS <==read/write===> GTED ==read===> Applications Security controls GRS uses a folder structure to both control and document who is responsible for maintaining the roles within it. The set up of new departments or applications creates a folder for their roles and a ‘grs-admin’ role that defines who can administer the roles within that folder. Additionally, role-management access is removed when people leave GT, and, as access within GRS is controlled via GRS itself, more stringent, automated cleanup can be implemented by role owners. Finally, GRS maintains history of role-membership changes and their causes, so unexpected memberships can be investigated to understand who, how, and when the changes were made. What is the SLA for GRS? The data managed by GRS is published into GTED’s various data services and is highly available whenever applications need to make access-control decisions. The GRS engine itself is not as highly available, and changes can be delayed when it is not available, some changes may be delayed. However the data for roles is reflected into GTED. Requesting Access to the GRS Client The process of getting GRS access has been greatly improved where GRS shell access is automatically granted to an account that has admin access to roles/folders within GRS. It should take from 12 to 24 hours for the new admin to have /central/services/iam/delegated-admin-ui/grs/enabled which is how access to the “Zork client” is managed. If you want access to a particular area of GRS, you must request it from the person or people who manage that GRS area. Everything else happens automatically. For custom code to use GRS, there is an API, but help for programming is very limited. Terminated Employees As described here, GRS offers facilities to accelerate the removal of IT Access when employees leave Georgia Tech. This section will describe how to take advantage of them. First of all, GRS has two roles (#3 and #5 below) that immediately start removing access from a departing employee: /departmental/unofficial employment/
   1: international-employees
   2: international-facstaff
   3: terminated employees                 <===== Normal: Add someone here for 90 days
   4: terminated employees (accounts)
   5: terminated employees-immediate cutoff<===== Especially concerned: Add someone here for 90 days
   6: terminated employees-immediate cutoff (accounts)
   7: unofficial departmental employees
   8: unofficial departmental employees (accounts)
   9: unofficial departmental faculty
  10: unofficial departmental staff It is recommended that you add departing employees to one of these roles temporarily (for 90 days) to have the following effects: Services that use “unofficial departmental employees” to enable employees will quickly see that this person is no longer an employee. In comparison, services that use something more direct HCM data (like eduPersonAffiliation=employee) will have at least 8-72+ hours before they see the changes Other services, particularly administrative ones, use the ‘terminated employees’ roles as kill Switches and, therefore, also quickly remove access Finally, you can incorporate “unofficial departmental employees” and/or “terminated employees” roles within your IT services to implement faster and more-consistent deauthorization practices. How to: Incorporating “terminated employees” into your GRS roles: There are three popular methods of incorporating “terminated employees” functionality into your GRS roles: Use the “unofficial departmental employees” role instead of eduPersonAffiliation=employee Build a -eligible role for your employee-focused service: Enable “unofficial departmental employees” in it Make the -eligible role a Prerequisite Rule for your role (This gives you the ability to use ad-hoc authorization for your service, but also make sure everyone loses access when they leave GT) Use the “unofficial departmental employees” role as a condition to your overrides. This is quick and dirty, but not as good as #2. Add “terminated employees” or “terminated employees-immediate cutoff” to your roles as a Disabling rules. Note: The use the “(accounts)” flavor of these roles when your service roles are account based and the non-“(accounts)” flavor for person-based roles. How-to: Adding “terminated employees” overrides with BuzzApi Using BuzzApi’s central.iam.grs.overrides endpoint can make role-membership and gted-data propagation faster, which is particularly useful when wanting to deauthorize people quickly. Here is a screenshot of creating an example override into “terminated employees.” Note: You need to change the application from iat_buzzapi to your own application You need to select CREATE You need to increase the timeout to at least 99 seconds, if not longer You’re adding (enabling) them to the Terminated Employees role, which, of course, disables them from various service roles While IAT’s BuzzApi UI is useful for a couple overrides, it’s best to at least starting using curl or a semi-serious scripting environment to implement numerous overrides. For instance: $ BUZZAPI_APP=mwbert
$ read -p "Enter password for $BUZZAPI_APP: "  -s BUZZAPI_PW
Enter password for mwbert: 
$ BUZZAPI_PW_B64=$(echo -n "$BUZZAPI_PW" | base64 )
$ DEPARTING_EMPLOYEE_USERNAME=gburdell3
$ curl "https://api.gatech.edu/apiv3/central.iam.grs.overrides/create?api_app_id=$BUZZAPI_APP&api_app_password=$BUZZAPI_PW_B64&api_request_mode=sync&api_receive_timeout=99000&requesting_username=$BUZZAPI_APP&role=terminated%20employees&username=$DEPARTING_EMPLOYEE_USERNAME&type=enabling&duration=90%20days&comment=Last%20day%20was%20today" Last edited by Bert Bee-Lindgren, 2022-09-16 14:00:58 Short link to this page Emergency Information Legal & Privacy Information Accessibility Accountability Accreditation Employment © 2014 Georgia Institute of Technology